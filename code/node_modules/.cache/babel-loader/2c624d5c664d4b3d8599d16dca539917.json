{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  login: {\n    accessToken: null,\n    userId: 0,\n    userName: '',\n    reviewer: '',\n    errorMessage: null,\n    loginMessage: null,\n    loggedoutMessage: null\n  }\n};\nexport const user = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    setAccessToken: (state, action) => {\n      const {\n        accessToken\n      } = action.payload;\n      console.log(`Access Token: ${accessToken}`);\n      state.login.accessToken = accessToken;\n    },\n    setUserId: (state, action) => {\n      const {\n        userId\n      } = action.payload;\n      console.log(`User Id: ${userId}`);\n      state.login.userId = userId;\n    },\n    setUserName: (state, action) => {\n      const {\n        userName\n      } = action.payload;\n      console.log(`username: ${userName}`);\n      state.login.userName = userName;\n    },\n    // setReviewer: (state, action) => {\n    //   const { reviewer } = action.payload;\n    //   console.log(`reviewer: ${reviewer}`);\n    //   state.login.reviewer = reviewer;\n    // },\n    setErrorMessage: (state, action) => {\n      const {\n        errorMessage\n      } = action.payload;\n      console.log(`Error Message: ${errorMessage}`);\n      state.login.errorMessage = errorMessage;\n    },\n    setLoginMessage: (state, action) => {\n      const {\n        loginMessage\n      } = action.payload;\n      console.log(`Secret Message: ${loginMessage}`);\n      state.login.loginMessage = loginMessage;\n    },\n    setLoggedoutMessage: (state, action) => {\n      const {\n        loggedoutMessage\n      } = action.payload;\n      console.log(`You are logged out: ${loggedoutMessage}`);\n      state.login.loggedoutMessage = loggedoutMessage;\n    }\n  }\n});\nexport const login = (name, password) => {\n  const LOGIN_URL = 'http://localhost:9001/sessions'; // const LOGIN_URL =\n\n  return dispatch => {\n    fetch(LOGIN_URL, {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        password\n      }),\n      headers: {\n        'content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.text().then(json => {\n          throw new Error(json);\n        });\n      }\n    }).then(json => {\n      dispatch(user.actions.setAccessToken({\n        accessToken: json.accessToken\n      }));\n      dispatch(user.actions.setUserId({\n        userId: json.userId\n      }));\n      dispatch(user.actions.setUserName({\n        userName: name\n      }));\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: json.message\n      }));\n    }).catch(err => {\n      dispatch(user.actions.logout());\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: err\n      }));\n    });\n  };\n};\nexport const getLoginMessage = () => {\n  const USERS_URL = 'http://localhost:9001/users'; // const USERS_URL =\n\n  return (dispatch, getState) => {\n    const accessToken = getState().user.login.accessToken;\n    const userId = getState().user.login.userId;\n    fetch(`${USERS_URL}/${userId}`, {\n      method: 'GET',\n      headers: {\n        Authorization: accessToken\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw 'Please, try again.';\n    }).then(json => {\n      dispatch(user.actions.setLoginMessage({\n        loginMessage: JSON.stringify(json)\n      }));\n    }).catch(err => {\n      dispatch(user.actions.setErrorMessage({\n        errorMessage: err\n      }));\n    });\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    dispatch(user.actions.setLoginMessage({\n      LogInMessage: null\n    }));\n    dispatch(user.actions.setErrorMessage({\n      errorMessage: null\n    }));\n    dispatch(user.actions.setAccessToken({\n      accessToken: null\n    }));\n    dispatch(user.actions.setUserId({\n      userId: 0\n    }));\n    dispatch(user.actions.setLoggedoutMessage({\n      loggedoutMessage: true\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/josephine/Desktop/myproject/yogajuristen-frontend/src/reducers/user.js"],"names":["createSlice","initialState","login","accessToken","userId","userName","reviewer","errorMessage","loginMessage","loggedoutMessage","user","name","reducers","setAccessToken","state","action","payload","console","log","setUserId","setUserName","setErrorMessage","setLoginMessage","setLoggedoutMessage","password","LOGIN_URL","dispatch","fetch","method","body","JSON","stringify","headers","then","res","ok","json","text","Error","actions","message","catch","err","logout","getLoginMessage","USERS_URL","getState","Authorization","LogInMessage"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  login: {\n    accessToken: null,\n    userId: 0,\n    userName: '',\n    reviewer: '',\n    errorMessage: null,\n    loginMessage: null,\n    loggedoutMessage: null,\n  },\n};\n\nexport const user = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    setAccessToken: (state, action) => {\n      const { accessToken } = action.payload;\n      console.log(`Access Token: ${accessToken}`);\n      state.login.accessToken = accessToken;\n    },\n    setUserId: (state, action) => {\n      const { userId } = action.payload;\n      console.log(`User Id: ${userId}`);\n      state.login.userId = userId;\n    },\n    setUserName: (state, action) => {\n      const { userName } = action.payload;\n      console.log(`username: ${userName}`);\n      state.login.userName = userName;\n    },\n    // setReviewer: (state, action) => {\n    //   const { reviewer } = action.payload;\n    //   console.log(`reviewer: ${reviewer}`);\n    //   state.login.reviewer = reviewer;\n    // },\n    setErrorMessage: (state, action) => {\n      const { errorMessage } = action.payload;\n      console.log(`Error Message: ${errorMessage}`);\n      state.login.errorMessage = errorMessage;\n    },\n    setLoginMessage: (state, action) => {\n      const { loginMessage } = action.payload;\n      console.log(`Secret Message: ${loginMessage}`);\n      state.login.loginMessage = loginMessage;\n    },\n    setLoggedoutMessage: (state, action) => {\n      const { loggedoutMessage } = action.payload;\n      console.log(`You are logged out: ${loggedoutMessage}`);\n      state.login.loggedoutMessage = loggedoutMessage;\n    },\n  },\n});\n\nexport const login = (name, password) => {\n  const LOGIN_URL = 'http://localhost:9001/sessions';\n  // const LOGIN_URL =\n  return (dispatch) => {\n    fetch(LOGIN_URL, {\n      method: 'POST',\n      body: JSON.stringify({ name, password }),\n      headers: { 'content-Type': 'application/json' },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.text().then((json) => { throw new Error(json) })\n        }\n      })\n      .then((json) => {\n        dispatch(\n          user.actions.setAccessToken({\n            accessToken: json.accessToken\n          })\n        );\n        dispatch(user.actions.setUserId({ userId: json.userId }));\n        dispatch(\n          user.actions.setUserName({\n            userName: name\n          })\n        );\n        dispatch(user.actions.setErrorMessage({ errorMessage: json.message }))\n      })\n      .catch((err) => {\n        dispatch(user.actions.logout());\n        dispatch(user.actions.setErrorMessage({ errorMessage: err }));\n      });\n  };\n};\n\nexport const getLoginMessage = () => {\n  const USERS_URL = 'http://localhost:9001/users';\n\n  // const USERS_URL =\n  return (dispatch, getState) => {\n    const accessToken = getState().user.login.accessToken;\n    const userId = getState().user.login.userId;\n    fetch(`${USERS_URL}/${userId}`, {\n      method: 'GET',\n\n      headers: { Authorization: accessToken },\n    })\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        throw 'Please, try again.';\n      })\n      .then((json) => {\n        dispatch(\n          user.actions.setLoginMessage({ loginMessage: JSON.stringify(json) })\n        );\n      })\n      .catch((err) => {\n        dispatch(user.actions.setErrorMessage({ errorMessage: err }));\n      });\n  };\n};\n\nexport const logout = () => {\n  return (dispatch) => {\n    dispatch(user.actions.setLoginMessage({ LogInMessage: null }));\n    dispatch(user.actions.setErrorMessage({ errorMessage: null }));\n    dispatch(user.actions.setAccessToken({ accessToken: null }));\n    dispatch(user.actions.setUserId({ userId: 0 }));\n    dispatch(user.actions.setLoggedoutMessage({ loggedoutMessage: true }));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}