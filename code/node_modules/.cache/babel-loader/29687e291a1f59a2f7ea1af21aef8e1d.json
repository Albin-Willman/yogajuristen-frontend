{"ast":null,"code":"var _jsxFileName = \"/Users/josephine/Desktop/myproject/yogajuristen-frontend/src/components/ReviewInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport warrior from '../images/warrior.jpg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { user } from 'reducers/user';\nconst Input = styled.div`\ndisplay: flex; \njustify-content: center; \ncolor: #5e5e5e; \nfont-family: Arial; \nbackground-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.3)), url(${warrior});\nbackground-size: cover;\nmargin-bottom: 40px; \n`;\nconst Form = styled.label`\nmargin: 30px; \ndisplay: flex; \nflex-direction: column; \nwidth: 50%; \n`;\nconst Text = styled.h2`\nmargin: 20px; \nfont-family: 'Barlow', sans-serif;\n\n\n`;\nconst Textarea = styled.textarea`\nheight: 100px; \n@media(min-width:668px) and (max-width:1024px){\n  height: 150px; \n}\n@media(min-width: 1024px){\n  height: 175px; \n}\n`;\nconst Button = styled.button`\nwidth: 40px;\nheight: 40px;\nborder: solid 2px white; \nborder-radius: 50%;\ncolor: white;\ndisplay: flex;  \nalign-items: center; \njustify-content: center;\nfont-size: 2rem;\nmargin: 20px 0; \nalign-self: right; \n\n`;\nexport const ReviewInput = ({\n  setReviews\n}) => {\n  const [userReview, setUserReview] = useState('');\n  const accessToken = useSelector(store => store.user.login.accessToken);\n  const userName = useSelector(store => store.user.login.userName);\n\n  const handleReviewSubmit = event => {\n    event.preventDefault();\n    fetch('http://localhost:9001/reviews', {\n      method: 'POST',\n      headers: {\n        Authorization: accessToken,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: userReview,\n        reviewer: userName\n      })\n    }).then(res => res.json()).then(newReview => {\n      setReviews(previousReviews => [newReview, ...previousReviews]);\n      setUserReview(''); // will empty the textarea when the form is submitted\n    });\n  };\n\n  if (accessToken) {\n    return /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, \"Log in to leave a review\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleReviewSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \"L\\xE4mna g\\xE4rna en h\\xE4lsning eller en recension! \"), /*#__PURE__*/React.createElement(Textarea, {\n      onChange: event => setUserReview(event.target.value),\n      value: userReview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, \"+\"))));\n  }\n};","map":{"version":3,"sources":["/Users/josephine/Desktop/myproject/yogajuristen-frontend/src/components/ReviewInput.js"],"names":["React","useState","useEffect","styled","warrior","useDispatch","useSelector","user","Input","div","Form","label","Text","h2","Textarea","textarea","Button","button","ReviewInput","setReviews","userReview","setUserReview","accessToken","store","login","userName","handleReviewSubmit","event","preventDefault","fetch","method","headers","Authorization","body","JSON","stringify","message","reviewer","then","res","json","newReview","previousReviews","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,eAArB;AAEA,MAAMC,KAAK,GAAGL,MAAM,CAACM,GAAI;;;;;+EAKsDL,OAAQ;;;CALvF;AAWA,MAAMM,IAAI,GAAGP,MAAM,CAACQ,KAAM;;;;;CAA1B;AAMA,MAAMC,IAAI,GAAGT,MAAM,CAACU,EAAG;;;;;CAAvB;AAOA,MAAMC,QAAQ,GAAGX,MAAM,CAACY,QAAS;;;;;;;;CAAjC;AAUA,MAAMC,MAAM,GAAGb,MAAM,CAACc,MAAO;;;;;;;;;;;;;CAA7B;AAkBA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAC7C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMqB,WAAW,GAAGhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAAChB,IAAN,CAAWiB,KAAX,CAAiBF,WAA7B,CAA/B;AACA,QAAMG,QAAQ,GAAGnB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAAChB,IAAN,CAAWiB,KAAX,CAAiBC,QAA7B,CAA5B;;AAEA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpCA,IAAAA,KAAK,CAACC,cAAN;AAEAC,IAAAA,KAAK,CAAC,+BAAD,EAAkC;AACrCC,MAAAA,MAAM,EAAE,MAD6B;AAErCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEV,WADR;AAEP,wBAAgB;AAFT,OAF4B;AAOrCW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,OAAO,EAAEhB,UAAX;AAAuBiB,QAAAA,QAAQ,EAAEZ;AAAjC,OAAf;AAP+B,KAAlC,CAAL,CASGa,IATH,CASSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATjB,EAUGF,IAVH,CAUSG,SAAD,IAAe;AACnBtB,MAAAA,UAAU,CAAEuB,eAAD,IAAqB,CAACD,SAAD,EAAY,GAAGC,eAAf,CAAtB,CAAV;AACArB,MAAAA,aAAa,CAAC,EAAD,CAAb,CAFmB,CAEA;AACpB,KAbH;AAcD,GAjBD;;AAkBA,MAAIC,WAAJ,EAAiB;AACf,wBAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP,CAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAM,MAAA,QAAQ,EAAEI,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADF,eAEE,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAGC,KAAD,IAAWN,aAAa,CAACM,KAAK,CAACgB,MAAN,CAAaC,KAAd,CADpC;AAEE,MAAA,KAAK,EAAExB,UAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAOE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAPF,CADF,CADF,CADF;AAmBD;AACF,CA9CM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport warrior from '../images/warrior.jpg'\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { user } from 'reducers/user';\n\nconst Input = styled.div`\ndisplay: flex; \njustify-content: center; \ncolor: #5e5e5e; \nfont-family: Arial; \nbackground-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.3)), url(${warrior});\nbackground-size: cover;\nmargin-bottom: 40px; \n`\n\n\nconst Form = styled.label`\nmargin: 30px; \ndisplay: flex; \nflex-direction: column; \nwidth: 50%; \n`\nconst Text = styled.h2`\nmargin: 20px; \nfont-family: 'Barlow', sans-serif;\n\n\n`\n\nconst Textarea = styled.textarea`\nheight: 100px; \n@media(min-width:668px) and (max-width:1024px){\n  height: 150px; \n}\n@media(min-width: 1024px){\n  height: 175px; \n}\n`\n\nconst Button = styled.button`\nwidth: 40px;\nheight: 40px;\nborder: solid 2px white; \nborder-radius: 50%;\ncolor: white;\ndisplay: flex;  \nalign-items: center; \njustify-content: center;\nfont-size: 2rem;\nmargin: 20px 0; \nalign-self: right; \n\n`\n\n\n\n\nexport const ReviewInput = ({ setReviews }) => {\n  const [userReview, setUserReview] = useState('');\n  const accessToken = useSelector((store) => store.user.login.accessToken);\n  const userName = useSelector((store) => store.user.login.userName);\n\n  const handleReviewSubmit = (event) => {\n    event.preventDefault();\n\n    fetch('http://localhost:9001/reviews', {\n      method: 'POST',\n      headers: {\n        Authorization: accessToken,\n        'Content-Type': 'application/json',\n      },\n\n      body: JSON.stringify({ message: userReview, reviewer: userName })\n    })\n      .then((res) => res.json())\n      .then((newReview) => {\n        setReviews((previousReviews) => [newReview, ...previousReviews]);\n        setUserReview(''); // will empty the textarea when the form is submitted\n      });\n  };\n  if (accessToken) {\n    return <Input><p>Log in to leave a review</p></Input>\n  } else {\n    return (\n      <form onSubmit={handleReviewSubmit}>\n        <Input>\n          <Form>\n            <Text>Lämna gärna en hälsning eller en recension! </Text>\n            <Textarea\n              onChange={(event) => setUserReview(event.target.value)}\n              value={userReview}\n            />\n\n            <Button\n              type='submit'\n            >\n              +\n          </Button>\n          </Form>\n        </Input>\n      </form>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}